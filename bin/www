#!/usr/bin/env node

const app = require("../app");
const debug = require("debug")("task-server-radency:server");
const http = require("http");
const mongoose = require("mongoose");
const dotenv = require("dotenv");
dotenv.config();

const DB_HOST = process.env.CONNECT;
const port = normalizePort(process.env.PORT || "3001");
app.set("port", port);

const server = http.createServer(app);

mongoose
  .connect(DB_HOST)
  .then(() => {
    console.log("Connect to data base succes");
    server.listen(port, () => {
      console.log(`server listen a port:${port}`);
    });
  })
  .catch((error) => console.log(error));

server.on("error", onError);
server.on("listening", onListening);

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    return val;
  }

  if (port >= 0) {
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
